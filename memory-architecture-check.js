// –ü–†–û–í–ï–†–ö–ê –ê–†–•–ò–¢–ï–ö–¢–£–†–´ –ü–ê–ú–Ø–¢–ò JARVIS
import fs from 'fs';

console.log('üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ê–†–•–ò–¢–ï–ö–¢–£–†–´ –ü–ê–ú–Ø–¢–ò JARVIS');
console.log('='.repeat(50));

// 1. KERNEL –ü–ê–ú–Ø–¢–¨
console.log('\nüìä 1. KERNEL MEMORY STATUS:');
try {
  const kernelData = fs.readFileSync('/proc/jarvis_core', 'utf8');
  console.log('‚úì Kernel –º–æ–¥—É–ª—å –∞–∫—Ç–∏–≤–µ–Ω');
  console.log('Data:', kernelData.substring(0, 200) + '...');
} catch(e) {
  console.log('‚ùå Kernel –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', e.message);
}

// 2. POSTGRESQL –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï
console.log('\nüìä 2. DATABASE CONNECTION:');
try {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ PostgreSQL –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
  console.log('DATABASE_URL exists:', !!process.env.DATABASE_URL);
  console.log('PGHOST exists:', !!process.env.PGHOST);
  console.log('PGPORT exists:', !!process.env.PGPORT);
} catch(e) {
  console.log('‚ùå Database env error:', e.message);
}

// 3. –§–ê–ô–õ–û–í–ê–Ø –°–ò–°–¢–ï–ú–ê –ü–ê–ú–Ø–¢–ò
console.log('\nüìä 3. FILE SYSTEM MEMORY:');
const memoryPaths = [
  '/tmp/jarvis_memory.json',
  '/root/j/server/jarvis_state.json',
  './jarvis_persistent_memory.json'
];

memoryPaths.forEach(path => {
  try {
    if (fs.existsSync(path)) {
      const stat = fs.statSync(path);
      console.log(`‚úì ${path} - ${stat.size} bytes`);
    } else {
      console.log(`‚ùå ${path} - –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
    }
  } catch(e) {
    console.log(`‚ùå ${path} - –æ—à–∏–±–∫–∞: ${e.message}`);
  }
});

// 4. JARVIS –ë–ò–û–°–ò–ù–ì–£–õ–Ø–†–ù–û–°–¢–¨ –§–ê–ô–õ
console.log('\nüìä 4. JARVIS BIO-SINGULARITY:');
try {
  if (fs.existsSync('./jarvis-true-bio-singularity.js')) {
    const content = fs.readFileSync('./jarvis-true-bio-singularity.js', 'utf8');
    console.log('‚úì –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –Ω–∞–π–¥–µ–Ω');
    console.log('Size:', content.length, '—Å–∏–º–≤–æ–ª–æ–≤');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –ø–∞–º—è—Ç—å –≤ –∫–æ–¥–µ
    const hasMemorySystem = content.includes('memory') || content.includes('Memory');
    const hasDatabase = content.includes('database') || content.includes('Database');
    const hasKernel = content.includes('kernel') || content.includes('/proc/jarvis_core');
    
    console.log('Memory —Å–∏—Å—Ç–µ–º–∞:', hasMemorySystem ? '‚úì' : '‚ùå');
    console.log('Database –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è:', hasDatabase ? '‚úì' : '‚ùå');
    console.log('Kernel –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è:', hasKernel ? '‚úì' : '‚ùå');
  } else {
    console.log('‚ùå jarvis-true-bio-singularity.js –Ω–µ –Ω–∞–π–¥–µ–Ω');
  }
} catch(e) {
  console.log('‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è JARVIS —Ñ–∞–π–ª–∞:', e.message);
}

console.log('\n' + '='.repeat(50));
console.log('üéØ –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï: –ê–Ω–∞–ª–∏–∑ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –ø–∞–º—è—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω');